#DesktopUtilityCore
#1.1
#@{"open" = "[FileName] opens a file"; "fcopy" = "[FileName],<FileName> [Destination] copy a file"; "rename" = "[FileName] [NewName] renames a file"; "remove" = "[FileName],<FileName> removes a file"; "zip" = "[FileName],<FileName> [ArchiveName] adds a file to an archive"; "unzip" = "[FileName] [FolderName] extracts a file form an archive"; "setwallpaper" = "[FileName] sets the desktop background"; "nav" = "<dir / back> navigates trough the file system"}
#"cd $env:USERPROFILE\Desktop"

#this part is by ChatGPT cuz Im ass lol
Add-Type @"
    using System;
    using System.Runtime.InteropServices;
    public class Wallpaper {
        [DllImport("user32.dll", CharSet=CharSet.Auto)]
        static extern Int32 SystemParametersInfo(UInt32 uiAction, UInt32 uiParam, String pvParam, UInt32 fWinIni);
        public static void Set(String path) {
            SystemParametersInfo(0x0014, 0, path, 0x01 | 0x02);
        }
    }
"@

function open ($Item, $OpenWith)
{
	$web = [bool](Invoke-Command { try { Invoke-WebRequest -Uri $Item } catch { } })
	if ((Test-Path $Item) -or $web)
	{
	
		$Item = $Item.Replace("~", " ")
		if ($web -and !$Item.Contains("www.")) {$Item = ("www." + $Item)}
		if ($web -and !$Item.Contains(":\\")) {$Item = ("http:\\" +$Item)}
		
		if ($OpenWith) { Start-Process $OpenWith (Get-Item $Item).FullName }
		else { explorer $Item }
		WriteTCPMessage ("`n$Item Opened!`n")
	}
	else { WriteTCPMesage "`nItem Not Found!`n" }
	
	Remove-Variable file -ErrorAction SilentlyContinue
}

function fcopy ($files, $destination)
{
	$files = $files.Replace("~", " ")
	$files = $files.Split(",")
	$destination = $destination.Replace("~", " ")
	
	try
	{
		if ((Get-Item $destination).Extension -ne "") { Write-Error "" }
		Copy-Item -Path $files -Destination $destination -Force
		WriteTCPMessage "`nCopy Sucessfull!`n"
	}
	catch { "`nCopy Failed!`n" }
	Remove-Variable files, destination -ErrorAction SilentlyContinue
}

function rename ($file, $newname)
{
	$file = $file.Replace("~", " ")
	$newname = $newname.Replace("~", " ")
	try
	{
		Rename-Item -Path $file -NewName $destination -Force
		WriteTCPMessage "`nRename Sucessfull!`n"
	}
	catch { "`nRename Failed!`n" }
	Remove-Variable file, newname -ErrorAction SilentlyContinue
}

function remove ($files)
{
	$files = $files.Replace("~", " ")
	$files = $files.Split(",")
	try
	{
		Remove-Item -Path $files -Force
		WriteTCPMessage "`nSucessfully Removed!`n"
	}
	catch { WriteTCPMessage "`nRemove Failed!`n" }
	Remove-Variable files -ErrorAction SilentlyContinue
}

function zip ($files, $zipname, [switch]$Compress)
{
	$files = $files.Replace("~", " ")
	$zipname = $zipname.Replace("~", " ")
	$files = $files.Split(",")
		
	try
	{
		Compress-Archive -Path $files -DestinationPath $zipname -CompressionLevel (Invoke-Command { if ($Compress) { "Optimal" } else { "NoCompression" } })
		WriteTCPMessage "`nSucessfully Compressed To $zipname!`n"
	}
	catch { WriteTCPMessage "`nFailed Compressing!`n" }
	Remove-Variable files, zipname -ErrorAction SilentlyContinue
}

function unzip ($file, $folder)
{
	$file = $files.Replace("~", " ")
	$folder = $folder.Replace("~", " ")
	
	try
	{
		Expand-Archive -Path $file -DestinationPath $folder
		WriteTCPMessage "`nDecompressed in $folder`n"
	}
	catch { WriteTCPMessage "`nDecompress Failed!" }
	Remove-Variable file, folder -ErrorAction SilentlyContinue
}

function setwallpaper ($file)
{
	try
	{
		[Wallpaper]::Set($file)
		WriteTCPMessage "`nSucessfully Set Wallpaper!`n"
	}
	catch { WriteTCPMessage "`nFailed Setting Wallpaper!" }
	Remove-Variable file -ErrorAction SilentlyContinue
}

function nav ($Action)
{
	try { $Action = $Action.Replace("~", " ") } catch {}
	try
	{
		if (!$Action) { $Action = Get-Location }
		if ($Action -eq "back") { $Action = Split-Path (Get-Location) }
		if ($Action -in (Get-ChildItem).Name) { $Action = (Get-Item $Action).FullName }
		
		Set-Location $Action
		WriteTCPMessage ((Get-Location | Out-String) + (Get-ChildItem | Select-Object Name, LastWriteTime | Out-String).Replace("LastWriteTime", "Last Opened"))
		
	}
	catch { WriteTCPMessage "`nItem Not Found!`n" }
}
